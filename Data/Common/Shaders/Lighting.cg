//////////////////////////////////////////////////////////////////////////////
// Structs
//////////////////////////////////////////////////////////////////////////////

struct VERTEX_IN
{
	float4 Position : POSITION;
	float3 Normal : NORMAL;
	float2 TexCoord0 : TEXCOORD0;
	float2 TexCoord1 : TEXCOORD1;
	float3 Tangent : TANGENT0;
};

struct VERTEX_OUT
{
	float4 WorldPosition : POSITION;
	float4 ObjectPosition : TEXCOORD1;

	float2 TexCoord0 : TEXCOORD0;
	float2 TexCoord1 : TEXCOORD6;

	float3 Tangent : TEXCOORD2;
	float3 Bitangent : TEXCOORD3;
	float3 Normal : TEXCOORD4;

	float4 Color : COLOR;
};

struct FRAGMENT_OUT
{
	float4 Color : COLOR;
};

struct LightStruct
{
	float4 Position;
	float4 Direction;
	float3 Diffuse;
	float3 Specular;
	float4 Attenuation;
	float4 SpotlightParameters;
};

struct MaterialStruct
{
	float3 Emissive;
	float3 Diffuse;
	float3 Specular;
	float Shininess;
};

//////////////////////////////////////////////////////////////////////////////
// Global methods
//////////////////////////////////////////////////////////////////////////////

float CalcAttenuation( float3 VertexPos, LightStruct Light )
{
	float kC = Light.Attenuation[1];
	float kL = Light.Attenuation[2];
	float kQ = Light.Attenuation[3];
	float d = distance( VertexPos, Light.Position );

	return 1 / ( kC   +   kL * d   +   kQ * d * d );
}

float CalcSpotlight( in float3 VertexPos, in LightStruct Light, in float4x4 WorldI )
{
	float CosInnerAngle = Light.SpotlightParameters[ 0 ];
	float CosOuterAngle = Light.SpotlightParameters[ 1 ];
	float Falloff		= Light.SpotlightParameters[ 2 ];
	//float ControlValue	= Light.SpotlightParameters[ 3 ];

	float3 V = normalize( VertexPos - Light.Position );
	float3 Direction = mul( WorldI, float4(Light.Direction.xyz,0) );
	float CosDirection = dot( V, Direction );

	return smoothstep( CosOuterAngle, CosInnerAngle, CosDirection );
}

//////////////////////////////////////////////////////////////////////////////
// Lighting method
//////////////////////////////////////////////////////////////////////////////

void LightFunc( in float3 VertexPosition, in float3 Normal,
			    in float3 CameraPosition, in LightStruct Light,
			    inout float3 Diffuse, inout float3 Specular,
				in MaterialStruct Material, in float4x4 WorldI, float3 CamToVertNorm )
{
	//
	// Precalc
	//

	// Calculate attenuation
	float AttenuationFactor;

	AttenuationFactor = CalcAttenuation( VertexPosition, Light );

	// Calculate spotlight effect
	float SpotFactor;
	if( Light.SpotlightParameters[ 0 ] == 1.f )
		SpotFactor = 1.0f; // None-spotlight, bail
	else
		SpotFactor = CalcSpotlight( VertexPosition, Light, WorldI );

	//
	// Shade
	//

	// Diffuse
	float3 L = normalize( Light.Position - VertexPosition );
	float DiffuseRatio = max(dot(Normal, L), 0);
	float3 _Diffuse = Light.Diffuse * DiffuseRatio * SpotFactor * AttenuationFactor;

	Diffuse += /*max(float3(0,0,0),*/ min(float3(1,1,1), _Diffuse)/*)*/;

	// Specular
	//float3 V = normalize( CameraPosition.xyz - VertexPosition );
	float3 H = normalize( L + CamToVertNorm );
	float SpecularRatio = pow(max(dot(Normal, H), 0), Material.Shininess);
	if( DiffuseRatio <= 0 )
		SpecularRatio = 0;
	float3 _Specular = Light.Specular * SpecularRatio * SpotFactor * AttenuationFactor;

	Specular += /*max(float3(0,0,0),*/ min(float3(1,1,1), _Specular)/*)*/;
}

//////////////////////////////////////////////////////////////////////////////
// Common vertex program
//////////////////////////////////////////////////////////////////////////////

VERTEX_OUT CommonVertexProgram(
		VERTEX_IN IN,
		uniform float4x4 WorldViewProj
	)
{
	VERTEX_OUT OUT;

	OUT.WorldPosition = mul( WorldViewProj , IN.Position );
	OUT.ObjectPosition = IN.Position;
	OUT.TexCoord0 = IN.TexCoord0;
	OUT.TexCoord1 = IN.TexCoord1;

	/*OUT.Normal = mul( WorldViewIT, float4(IN.Normal,0) );
	OUT.Tangent = mul( WorldViewIT, float4(IN.Tangent,0) );
	OUT.Bitangent = cross( OUT.Tangent, OUT.Normal );*/

	OUT.Normal = /*normalize*/(IN.Normal);
	OUT.Tangent = IN.Tangent;
	OUT.Bitangent = /*normalize*/(cross( OUT.Tangent, OUT.Normal ));

	//OUT.Color = float4( IN.Tangent , 1 );
	
	return OUT;
}

//////////////////////////////////////////////////////////////////////////////
// Common vertex program
//////////////////////////////////////////////////////////////////////////////

FRAGMENT_OUT CommonFragmentProgram( VERTEX_OUT IN,

	uniform float4 LightPosition0,
	uniform float4 LightDirection0,
	uniform float3 LightDiffuse0,
	uniform float3 LightSpecular0,
	uniform float4 LightAttenuation0,
	uniform float4 SpotlightParameters0,

	uniform float4 LightPosition1,
	uniform float4 LightDirection1,
	uniform float3 LightDiffuse1,
	uniform float3 LightSpecular1,
	uniform float4 LightAttenuation1,
	uniform float4 SpotlightParameters1,

	uniform float4 LightPosition2,
	uniform float4 LightDirection2,
	uniform float3 LightDiffuse2,
	uniform float3 LightSpecular2,
	uniform float4 LightAttenuation2,
	uniform float4 SpotlightParameters2,

	uniform float4 LightPosition3,
	uniform float4 LightDirection3,
	uniform float3 LightDiffuse3,
	uniform float3 LightSpecular3,
	uniform float4 LightAttenuation3,
	uniform float4 SpotlightParameters3,

	uniform MaterialStruct Material,

	uniform float3 CameraPosition,
	uniform float3 AmbientLight,

	uniform float4x4 WorldI,

	uniform float UseNormalMap,
	uniform float UseOcclusionMap,

	uniform sampler2D NormalMap : register(s0),
	uniform sampler2D DiffuseMap : register(s1),
	uniform sampler2D OcclusionMap : register(s2)

	)
{
	FRAGMENT_OUT OUT;

	////////////////// SET UP //////////////////////////

	float3 Normal;

	if( UseNormalMap > 0.5 )
	{
		// Build a matrix that will transform from tangent space to object space
		float3x3 TangentToObject = float3x3(
			normalize(IN.Tangent),
			normalize(IN.Bitangent),
			normalize(IN.Normal)
		);

		// Fetch normal from normal map
		float3 FetchedNormalColor = tex2D( NormalMap, IN.TexCoord0.xy );
		float3 FetchedNormal = /*normalize*/( (FetchedNormalColor * 2) - 1 );

		// Transform the normal to object space
		Normal = mul( FetchedNormal , TangentToObject );

	}
	else
	{
		Normal = IN.Normal;
	}

	float3 CamToVertNorm = normalize( CameraPosition.xyz - IN.ObjectPosition.xyz.xyz );

	////////////////// SHADING //////////////////////////

	float3 Diffuse = float3(0,0,0);
	float3 Specular = float3(0,0,0);

	LightStruct Light;

	// Setup light 0
	Light.Position				= LightPosition0;
	Light.Direction				= LightDirection0;
	Light.Diffuse				= LightDiffuse0;
	Light.Specular				= LightSpecular0;
	Light.Attenuation			= LightAttenuation0;
	Light.SpotlightParameters	= SpotlightParameters0;

	// Use this light to shade
	LightFunc( IN.ObjectPosition.xyz, Normal,
				CameraPosition, Light,
				Diffuse, Specular,
				Material, WorldI, CamToVertNorm );

	// Setup light 1
	Light.Position				= LightPosition1;
	Light.Direction				= LightDirection1;
	Light.Diffuse				= LightDiffuse1;
	Light.Specular				= LightSpecular1;
	Light.Attenuation			= LightAttenuation1;
	Light.SpotlightParameters	= SpotlightParameters1;

	// Use this light to shade
	LightFunc( IN.ObjectPosition.xyz, Normal,
				CameraPosition, Light,
				Diffuse, Specular,
				Material, WorldI, CamToVertNorm );

	// Setup light 2
	Light.Position				= LightPosition2;
	Light.Direction				= LightDirection2;
	Light.Diffuse				= LightDiffuse2;
	Light.Specular				= LightSpecular2;
	Light.Attenuation			= LightAttenuation2;
	Light.SpotlightParameters	= SpotlightParameters2;

	// Use this light to shade
	LightFunc( IN.ObjectPosition.xyz, Normal,
				CameraPosition, Light,
				Diffuse, Specular,
				Material, WorldI, CamToVertNorm );

	// Setup light 3
	Light.Position				= LightPosition3;
	Light.Direction				= LightDirection3;
	Light.Diffuse				= LightDiffuse3;
	Light.Specular				= LightSpecular3;
	Light.Attenuation			= LightAttenuation3;
	Light.SpotlightParameters	= SpotlightParameters3;

	// Use this light to shade
	LightFunc( IN.ObjectPosition.xyz, Normal,
				CameraPosition, Light,
				Diffuse, Specular,
				Material, WorldI, CamToVertNorm );


	// Ambient
	float3 Ambient = AmbientLight;

	// Clamp
	Diffuse = /*max(float3(0,0,0), */min(float3(1,1,1), Diffuse)/*)*/;
	Specular = /*max(float3(0,0,0), */min(float3(1,1,1), Specular)/*)*/;

	// Fetch diffuse fragment
	float3 DiffuseFragment = tex2D( DiffuseMap, IN.TexCoord0.xy );

	// Fetch occlusion fragment
	float3 OcclusionFragment = float3(1,1,1);
	if( UseOcclusionMap > 0.5 ) OcclusionFragment = tex2D( OcclusionMap, IN.TexCoord1.xy );

	// Result
	float3 LightingResult =
		Ambient + Material.Emissive +
		Diffuse +
		Specular*Material.Specular;
	OUT.Color.xyz = DiffuseFragment * OcclusionFragment * LightingResult;
	OUT.Color.w = 1;

	return OUT;
}















